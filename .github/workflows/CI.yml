# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CI -- build and unit test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  lint-format:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"

    - name: Install the project
      run: uv sync --all-extras --dev

    - name: Set up Python
      id: python-setup
      run: uv python install

    - name: Lint C++
      if: success() || steps.python-setup.outcome == 'success'
      working-directory: ${{ github.workspace }}
      run: |
        uv run cpplint --counting=detailed --recursive src

    - name: Format C++
      if: success() || steps.python-setup.outcome == 'success'
      working-directory: ${{ github.workspace }}
      run: ls src/**/*.[ch]pp | xargs uv run clang-format -Werror --dry-run --verbose

    - name: CMake
      if: success() || steps.python-setup.outcome == 'success'
      working-directory: ${{ github.workspace }}
      run: |
        find ./CMakeLists.txt src docs -type f -name "CMakeLists.txt" | xargs uv run cmake-format --check
        uv run cmake-format --check CMakeLists.txt

    - name: Lint Python
      if: success() || steps.python-setup.outcome == 'success'
      working-directory: ${{ github.workspace }}
      run: uv run ruff check

    - name: Format Python
      if: success() || steps.python-setup.outcome == 'success'
      working-directory: ${{ github.workspace }}
      run: uv run ruff format --check

  build-unit-test:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"

    - name: Install the project
      run: uv sync --all-extras --dev

    - name: Set up Python
      id: python-setup
      run: uv python install

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup MPI
      uses: mpi4py/setup-mpi@v1
      with:
        mpi: openmpi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DPARTHENON_DISABLE_HDF5=ON
        -DPARTHENON_DISABLE_EXAMPLES=ON
        -DPARTHENON_ENABLE_TESTING=OFF
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} -j4 --config ${{ matrix.build_type }}

    - name: Unit Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest -L unit

    - name: Regression Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --verbose -L regression


